


var stella = {};
stella.config = {};
stella.api = {};
stella.up = {};
stella.util = {};



stella.api.request = function(request, callback) {

	request.method = request.method.toLowerCase() || 'get';
	request.url = request.url || stella.config.api.url;
	request.version = request.version || stella.config.api.version;

	request.projectID = request.projectID || stella.config.projectID;

	request.auth = request.auth || {};
	request.auth.session = localStorage.getItem('stellaSession');

	if (request.method === 'get') {
		request.url += '/' + request.projectID;
		request.url += '/' + request.api.replace(/\./g,'-') + '/';
		request.url += '?' + stella.util.serialize(request.params);
		var body = null;
	}

	if (request.method === 'post') {
		var body = JSON.stringify(request);
	}

	var xhr = new XMLHttpRequest();

	xhr.addEventListener('error', function(event) {
		request.xhrError = event;
		console.log('[stella.js] XHR ERROR: Unable to contact ' + stella.config.api.url + ' due to network error');
		console.log(request);
	});

	xhr.addEventListener('load', function(event) {

		var result = JSON.parse(event.target.response);

		if (result.auth) {
			localStorage.setItem('stellaSession', result.auth.session);
		} else {
			localStorage.removeItem('stellaSession');
		}

		if (callback) return callback(result);

	});

	xhr.open(request.method, request.url, true);
	xhr.setRequestHeader('Stella-Api', request.api);
	xhr.setRequestHeader('Stella-Api-Version', request.version);
	xhr.setRequestHeader('Stella-Project-Id', request.projectID);
	xhr.setRequestHeader('Stella-Auth', btoa(JSON.stringify(request.auth)));
	xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
	xhr.send(body);

};


stella.config = {
	api : {
		url : 'https://api.stellaverse.com',
		version : 1
	},
	bucket : 'cdn.stellaverse.com',
	projectID : '000000000000',
	recaptcha : {
		key : '6LeZ6RMTAAAAAFaHzXK76s60uMlBlKzSe5NsWUL1'
	}
};



stella.up.abortUpload = function(uploadID) {

	var upload = stella.up.uploads[uploadID];
	var uploader = stella.up.uploaders[uploadID];

	uploader.abort();

	stella.up.uploads[uploadID].status = 'aborted';

	upload.onAbort(stella.up.uploads[uploadID]);

	return stella.up.finalizeUpload(stella.up.uploads[uploadID]);

}




stella.up.finalizeUpload = function(upload) {

	if (upload.to === 'account') {
		var request = {
			method : 'post',
			api : 'accounts.files.finalizeUpload',
			params : {
				fileURL : upload.url
			}
		};
	}

	if (upload.to === 'drive') {
		var request = {
			method : 'post',
			api : 'drive.objects.finalizeObjectUpload',
			projectID : upload.projectID,
			params : {
				objectID : upload.objectID
			}
		};
	}

	stella.api.request(request, function(result) {

		if (result.error) {
			stella.up.uploads[upload.id].status = 'error';
			stella.up.uploads[upload.id].error = result.error;
			upload.onError(stella.up.uploads[upload.id]);
			return;
		}

		stella.up.uploads[upload.id].status = 'complete';

		upload.onComplete(stella.up.uploads[upload.id]);

		return;

	});

};



stella.up.initializeUpload = function(upload) {

	var account = stella.util.getActiveAccount();
	var to = upload.to || 'drive';
	var file = upload.file;

	if (to === 'account') {
		var requestParams = {
			method : 'post',
			api : 'accounts.files.insertFile',
			params : {
				file : {
					name : upload.file.name,
					size : upload.file.size
				}
			}
		};
	}

	if (to === 'drive') {
		var requestParams = {
			method : 'post',
			api : 'drive.objects.insertObject',
			projectID : upload.projectID,
			params : {
				locale : upload.locale,
				parentID : upload.parentID,
				objectType : upload.objectType,
				title : upload.file.name,
				filename : upload.file.name
			}
		};
	}

	stella.api.request(requestParams, function(result) {

		if (result.error) {
			stella.up.uploads[upload.id].status = 'error';
			stella.up.uploads[upload.id].error = result.error;
			console.error(error);
			console.info(stella.up.uploads[upload.id]);
			if (upload.onError) upload.onError(stella.up.uploads[upload.id]);
			return;
		}

		upload.status = 'initialized';

		if (to === 'account') {

			var account = result.data.account;
			localStorage.setItem('stellaAccount', JSON.stringify(account));

			var file = result.data.file;

			upload.objectID = null;
			upload.url = file.url;
			upload.key = file.key;
			upload.ext = file.ext;
			upload.credentials = file.credentials;

		}

		if (to === 'drive') {

			var object = result.data;
			
			upload.objectID = object._id;
			upload.url = object.url;
			upload.key = object.key;
			upload.ext = object.ext;
			upload.credentials = object.credentials;

		}

		stella.up.uploads[upload.id] = upload;

		stella.up.uploadFile(stella.up.uploads[upload.id]);

		upload.onInit(stella.up.uploads[upload.id]);

		return;

	});

};




stella.up.upload = function(upload) {

	if (!window.AWS) {
		console.error('[stella.js] The AWS SDK for Javascript v2.171.0 or greater is required to upload files using Stella Up.');
		console.info('[stella.js] Visit the following URL for installation instructions:');
		console.info('[stella.js] http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-the-jssdk.html');
		alert('You must install the AWS SDK v2.171.0 or greater to use Stella Up. See your console for more details.');
		return;
	}

	upload.id = stella.up.uploads.length;
	upload.status = 'initializing';
	upload.date = {
		initiated : new Date().getTime(),
		completed : 0
	};

	var account = stella.util.getActiveAccount();

	if (!account) {
		upload.status = 'error';
		upload.error = 'You Must Login To Upload A File';
		console.error('[stella.js] You must login to upload a file.');
		console.info(upload);
		upload.onError(upload);
		return;
	}

	stella.up.uploads.push(upload);

	stella.up.initializeUpload(upload);

	return;

};



stella.up.uploaders = [];




stella.up.uploadFile = function(upload) {

	var bucket = upload.bucket || stella.config.bucket;

	var credentials = new AWS.Credentials({
		accessKeyId : upload.credentials.AccessKeyId,
		secretAccessKey : upload.credentials.SecretAccessKey,
		sessionToken : upload.credentials.SessionToken
	});

	AWS.config.region = 'us-east-1';

	var s3 = new AWS.S3({
		credentials : credentials,
		maxRetries : 100,
		params : {
			Bucket : bucket
		}
	});

	stella.up.uploaders[upload.id] = s3.upload({
		Key : upload.key,
		ACL : 'private',
		ContentType : upload.file.type,
		ContentLength : upload.file.size,
		Body : upload.file.buffer,
		ServerSideEncryption : 'AES256'
	});

	stella.up.uploaders[upload.id].on('httpUploadProgress', function(event) {

		var total = event.total;
		var loaded = event.loaded;
		var percent = loaded / total * 100;

		var now = new Date().getTime();
		var started = stella.up.uploads[upload.id].date.initiated;
		var elapsed = now - started;
		var rate = '0Mbps';
		var remaining = '0:00:00';

		stella.up.uploads[upload.id].status = 'uploading';
		stella.up.uploads[upload.id].loaded = loaded;
		stella.up.uploads[upload.id].total = total;
		stella.up.uploads[upload.id].percent = percent;
		stella.up.uploads[upload.id].rate = rate;
		stella.up.uploads[upload.id].remaining = remaining;

		upload.onProgress(stella.up.uploads[upload.id]);

		return;

	});

	stella.up.uploaders[upload.id].send(function(error, result) {

		if (error) {
			stella.up.uploads[upload.id].status = 'error';
			stella.up.uploads[upload.id].error = error;
			console.error('[stella.js] Upload error, please try again.');
			upload.onError(stella.up.uploads[upload.id]);
		} else {
			stella.up.uploads[upload.id].status = 'uploaded';
		}

		stella.up.finalizeUpload(stella.up.uploads[upload.id]);

		return;

	});

};



stella.up.uploads = [];



stella.util.getActiveAccount = function() {

	return JSON.parse(localStorage.getItem('stellaAccount'));

};



stella.util.serialize = function(obj, prefix) {

	var str = [], p;

	for (p in obj) {
		if (obj.hasOwnProperty(p)) {
			var k = prefix ? prefix + '[' + p + ']' : p, v = obj[p];
			str.push((v !== null && typeof v === 'object') ?
			stella.util.serialize(v, k) :
			encodeURIComponent(k) + "=" + encodeURIComponent(v));
		}
	}

	return str.join('&');

};



stella.util.setActiveAccount = function(account) {

	localStorage.setItem('stellaAccount', JSON.stringify(account));

	return true;

};



if ( typeof module === "object" && typeof module.exports === "object" ) {
	module.exports = stella;
} else {
	window.stella = stella;
}
